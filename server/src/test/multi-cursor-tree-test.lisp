(in-package :my-tree)

(declaim (optimize (speed 0) (space 0) (debug 3)))

(export 'test)
(defmacro test ()
  `(progn
     (defparameter *t* (create-multi-cursor-tree!))
     (objlet* ((cursor! (create-cursor! *t* 0))
               (cursor!-2 (create-cursor! *t* 0)))
       (push-cursor! *t* cursor!)
       (dotimes (m 5)
         (insert-data-after-cursor *t* cursor! m))
       (push-cursor! *t* cursor!-2)
       (dotimes (m 5)
         (insert-data-after-cursor *t* cursor! m))
       (dotimes (m 3)
         (delete-data-at-cursor *t* cursor!))
       (dotimes (m 3)
         (delete-data-at-cursor *t* cursor!-2))
       (repeat 4
         (move-cursor-to-prev *t* cursor!))
       (repeat 2
         (move-cursor-to-next *t* cursor!))
       (move-cursor-to-last *t* cursor!-2)
       (move-cursor-to-head *t* cursor!-2)
       (move-cursor-to-index *t* cursor!-2 3)
       (move-cursor-to-last *t* cursor!)
       ;; (print *t*)
       (is-cursor-last *t* cursor!))

     (defparameter *t2* (create-multi-cursor-tree!))
     
     (objlet* ((t-multi-cursor-tree! *t2*)
	       (c-cursor! (create-cursor! t 0)))
       (push-cursor! t c)      
       (time
	(dotimes (m 10)
	  ;; (if (eq 0 (mod m 100000))
	  ;;     (print m))
          (insert-data-after-cursor t c m)))

       (print (get-size t))


       ;; error!
       ;; (format *standard-output* "delete and insert at ith 100 times~%")
       ;; (let ((d))
       ;; 	 (time (dotimes (m 100)
       ;; 		 (format *standard-output* "m ~a~%" m)
       ;; 		 (let ((i (1+ (random (- t-size 2)))))
       ;; 		   (move-cursor-to-index t c i)
       ;; 		   (setq d (get-data c))
       ;; 		   (format *standard-output* "delete at ~a" i)
       ;; 		   (delete-data-at-cursor t c)
       ;; 		   (terpri)
       ;; 		   (move-cursor-to-index t c i)
       ;; 		   (format *standard-output* "insert at ~a d ~a" i d)
       ;; 		   (insert-data-after-cursor t c d)
       ;; 		   (terpri)
       ;; 		   ))))
       
       ;; (format *standard-output* "delete at 1 to 10~%")
       ;; (dotimes  (m 10)
       ;; 	 (objlet* ((t-multi-cursor-tree! (create-multi-cursor-tree!))
       ;; 		   (c-cursor! (create-cursor! t 0)))
       ;; 	   (push-cursor! t c)
       ;; 	   (dotimes (m 10)
       ;;       (insert-data-after-cursor t c m))
       ;; 	   (let ((i (1+ m)))
       ;; 	     (move-cursor-to-index t c i)
       ;; 	     (delete-data-at-cursor t c)
       ;; 	     (format *standard-output* "delete ~ath~%t ~a~%" i t))
       ;; 	   )	 
       ;; 	 )
       
       ;; (format *standard-output* "insert at 1 to 10~%")
       ;; (dotimes  (m 10)
       ;; 	 (objlet* ((t-multi-cursor-tree! (create-multi-cursor-tree!))
       ;; 		   (c-cursor! (create-cursor! t 0)))
       ;; 	   (push-cursor! t c)
       ;; 	   (dotimes (m 10)
       ;;       (insert-data-after-cursor t c m))
       ;; 	   (let ((i (1+ m)))
       ;; 	     (move-cursor-to-index t c i)
       ;; 	     (insert-data-after-cursor t c 100)
       ;; 	     (format *standard-output* "insert at i=~a~%t ~a~%" i t))
       ;; 	   )	 
       ;; 	 )
       
       ;; (time (dotimes (m 100000000)
       ;; 	       (objlet* ((t-multi-cursor-tree! (create-multi-cursor-tree!))
       ;; 			 (c-cursor! (create-cursor! t 0)))
       ;; 		 (push-cursor! t c)
       ;; 		 (time
       ;; 		  (dotimes (m 10)
       ;; 		    ;; (if (eq 0 (mod m 100000))
       ;; 		    ;;     (print m))
       ;; 		    (insert-data-after-cursor t c m)))
       ;; 		 (print t-size)
       ;; 		 (let ((d))
       ;; 		   (let ((i (1+ (random (1- t-size)))))
       ;; 		     (move-cursor-to-index t c i)
       ;; 		     (setq d (get-data c))
       ;; 		     (format *standard-output* "delete at ~a~%" i)
       ;; 		     (delete-data-at-cursor t c))
       ;; 		   (let ((i (1+ (random (1- t-size)))))
       ;; 		     (move-cursor-to-index t c i)
       ;; 		     (format *standard-output* "insert at ~a~%" i)
       ;; 		     (insert-data-after-cursor t c d))))))

       ;; (format *standard-output* "delete and insert at 2 7 8~%")
       ;; (let ((d))
       ;; 	 (time (dolist (i '(2 7 8))
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (setq d (get-data c))
       ;; 		 (format *standard-output* "delete at ~a" i)
       ;; 		 (terpri)
       ;; 		 (delete-data-at-cursor t c)
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 		 (terpri)
       ;; 		 (insert-data-after-cursor t c d))))

       ;; (format *standard-output* "delete and insert at 7 1 6 5 2 6 7 6 1~%")
       ;; (let ((d))
       ;; 	 (time (dolist (i '(7 1 6 5 2 6 7))
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (setq d (get-data c))
       ;; 		 (format *standard-output* "delete at ~a" i)
       ;; 		 (delete-data-at-cursor t c)
       ;; 		 (terpri)
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 		 (insert-data-after-cursor t c d)
       ;; 		 (terpri)
       ;; 		 (terpri)
       ;; 		 ))
       ;; 	 (break)
	 
       ;; 	 (setq i 6)
       ;; 	 (move-cursor-to-index t c i)
       ;; 	 (setq d (get-data c))
       ;; 	 (format *standard-output* "delete at ~a" i)
       ;; 	 (delete-data-at-cursor t c)
       ;; 	 (terpri)
       ;; 	 (break)
       ;; 	 (move-cursor-to-index t c i)
       ;; 	 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 	 (insert-data-after-cursor t c d)
       ;; 	 (terpri)
       ;; 	 (terpri)
       ;; 	 (break)
       ;; 	 )

       ;; (format *standard-output* "delete and insert at 8 7 1 1 5 2 1~%")
       ;; (let ((d))
       ;; 	 (time (dolist (i '(8 7 1 1 5 2 1))
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (setq d (get-data c))
       ;; 		 (format *standard-output* "delete at ~a" i)
       ;; 		 (delete-data-at-cursor t c)
       ;; 		 (terpri)
       ;; 		 (break)
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 		 (insert-data-after-cursor t c d)
       ;; 		 (terpri)
       ;; 		 (terpri)
       ;; 		 (break)
       ;; 		 )))
       
       ;; error!
       ;; (format *standard-output* "delete and insert at 8 7 1 1 5 2 1~%")
       ;; (let ((d))
       ;; 	 (time (dolist (i '(8 7 1 1 5 2 1))
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (setq d (get-data c))
       ;; 		 (format *standard-output* "delete at ~a" i)
       ;; 		 (delete-data-at-cursor t c)
       ;; 		 (terpri)
       ;; 		 (break)
       ;; 		 (move-cursor-to-index t c i)
       ;; 		 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 		 (insert-data-after-cursor t c d)
       ;; 		 (terpri)
       ;; 		 (terpri)
       ;; 		 (break)
       ;; 		 ))
       ;; 	 (break)	 
       ;; 	 (setq i 1)
       ;; 	 (move-cursor-to-index t c i)
       ;; 	 (setq d (get-data c))
       ;; 	 (format *standard-output* "delete at ~a" i)
       ;; 	 (delete-data-at-cursor t c)
       ;; 	 (terpri)
       ;; 	 (break)
       ;; 	 (move-cursor-to-index t c i)
       ;; 	 (format *standard-output* "insert at ~a d ~a" i d)
       ;; 	 (insert-data-after-cursor t c d)
       ;; 	 (terpri)
       ;; 	 (terpri)
       ;; 	 (break)
       ;; 	 )

       
       ;; error!

       (defparameter *t3* (create-multi-cursor-tree!))
       (defparameter *c3* (create-cursor! *t3* 0))

       (objlet* ((t-multi-cursor-tree! *t3*)
		 (c-cursor! *c3*))
	 (format *standard-output* "insert 1000000 elems~%")
	 (time (dotimes (m 1000000)
		 (insert-data-after-cursor t c m)))
	 (print t-size)
	 
	 (format *standard-output* "random delete and insert 100 times~%")
	 (time (dotimes (m 100)
		 (let ((d))
		   (let ((i (1+ (random (1- t-size)))))
		     (move-cursor-to-index t c i)
		     (setq d (get-data c))
		     ;; (format *standard-output* "delete at ~a" i)
		     (delete-data-at-cursor t c))
		   (let ((i (1+ (random (1- t-size)))))
		     (move-cursor-to-index t c i)
		     ;; (format *standard-output* "insert at ~a~%" i)
		     (insert-data-after-cursor t c d)))
		 
		 ;; (format *standard-output* "~%m ~a~%" m)
		 ))
	 )
       
       (time
	(repeat 100
	  (progn
	    (insert-data-after-cursor *t3* *c3* 199)
	    nil)))
       
       
       ;; (dotimes (m 1)
       ;; 	 (time
       ;; 	  (progn
       ;; 	    (move-cursor-to-index t c 10)
       ;; 	    (print (get-data c)))
       ;; 	    )
       ;; 	 (time
       ;; 	  (progn
       ;; 	    (move-cursor-to-index t c 300000)
       ;; 	    (print (get-data c))))
       ;; 	 (move-cursor-to-index t c 10)
       ;; 	 (time
       ;; 	  (dotimes (m 1000)
       ;; 	    (move-cursor-to-next t c)
       ;; 	    (print (get-data c)))))

       )
     )

  )
