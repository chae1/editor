SEND(2)                        Linux Programmer's Manual                        SEND(2)

NNAAMMEE
       send, sendto, sendmsg - send a message on a socket

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>

       ssssiizzee__tt sseenndd((iinntt _s_o_c_k_f_d,, ccoonnsstt vvooiidd **_b_u_f,, ssiizzee__tt _l_e_n,, iinntt _f_l_a_g_s));;

       ssssiizzee__tt sseennddttoo((iinntt _s_o_c_k_f_d,, ccoonnsstt vvooiidd **_b_u_f,, ssiizzee__tt _l_e_n,, iinntt _f_l_a_g_s,,
                      ccoonnsstt ssttrruucctt ssoocckkaaddddrr **_d_e_s_t___a_d_d_r,, ssoocckklleenn__tt _a_d_d_r_l_e_n));;

       ssssiizzee__tt sseennddmmssgg((iinntt _s_o_c_k_f_d,, ccoonnsstt ssttrruucctt mmssgghhddrr **_m_s_g,, iinntt _f_l_a_g_s));;

DDEESSCCRRIIPPTTIIOONN
       The  system calls sseenndd(), sseennddttoo(), and sseennddmmssgg() are used to transmit a message
       to another socket.

       The sseenndd() call may be used only when the socket is in  a  _c_o_n_n_e_c_t_e_d  state  (so
       that  the  intended recipient is known).  The only difference between sseenndd() and
       wwrriittee(2) is the presence of _f_l_a_g_s.  With a zero _f_l_a_g_s argument, sseenndd() is equiv‐
       alent to wwrriittee(2).  Also, the following call

           send(sockfd, buf, len, flags);

       is equivalent to

           sendto(sockfd, buf, len, flags, NULL, 0);

       The argument _s_o_c_k_f_d is the file descriptor of the sending socket.

       If  sseennddttoo()  is used on a connection-mode (SSOOCCKK__SSTTRREEAAMM, SSOOCCKK__SSEEQQPPAACCKKEETT) socket,
       the arguments _d_e_s_t___a_d_d_r and _a_d_d_r_l_e_n are ignored (and the error  EEIISSCCOONNNN  may  be
       returned  when they are not NULL and 0), and the error EENNOOTTCCOONNNN is returned when
       the socket was not actually connected.  Otherwise, the address of the target  is
       given by _d_e_s_t___a_d_d_r with _a_d_d_r_l_e_n specifying its size.  For sseennddmmssgg(), the address
       of the target is given by  _m_s_g_._m_s_g___n_a_m_e,  with  _m_s_g_._m_s_g___n_a_m_e_l_e_n  specifying  its
       size.

       For  sseenndd()  and  sseennddttoo(), the message is found in _b_u_f and has length _l_e_n.  For
       sseennddmmssgg(), the message is pointed to by the elements of the  array  _m_s_g_._m_s_g___i_o_v.
       The sseennddmmssgg() call also allows sending ancillary data (also known as control in‐
       formation).

       If the message is too long to pass atomically through the  underlying  protocol,
       the error EEMMSSGGSSIIZZEE is returned, and the message is not transmitted.

       No  indication  of failure to deliver is implicit in a sseenndd().  Locally detected
       errors are indicated by a return value of -1.

       When the message does not fit into the send buffer of the  socket,  sseenndd()  nor‐
       mally  blocks,  unless  the  socket has been placed in nonblocking I/O mode.  In
       nonblocking mode it would fail with the error  EEAAGGAAIINN  or  EEWWOOUULLDDBBLLOOCCKK  in  this
       case.   The  sseelleecctt(2) call may be used to determine when it is possible to send
       more data.

   TThhee ffllaaggss aarrgguummeenntt
       The _f_l_a_g_s argument is the bitwise OR of zero or more of the following flags.

       MMSSGG__CCOONNFFIIRRMM (since Linux 2.3.15)
              Tell the link layer that forward progress happened: you got a  successful
              reply  from  the  other side.  If the link layer doesn't get this it will
              regularly reprobe the neighbor (e.g., via a unicast ARP).  Valid only  on
              SSOOCCKK__DDGGRRAAMM  and  SSOOCCKK__RRAAWW sockets and currently implemented only for IPv4
              and IPv6.  See aarrpp(7) for details.

       MMSSGG__DDOONNTTRROOUUTTEE
              Don't use a gateway to send out the packet, send to  hosts  only  on  di‐
              rectly  connected  networks.   This is usually used only by diagnostic or
              routing programs.  This is defined only for protocol families that route;
              packet sockets don't.

       MMSSGG__DDOONNTTWWAAIITT (since Linux 2.2)
              Enables  nonblocking  operation;  if the operation would block, EEAAGGAAIINN or
              EEWWOOUULLDDBBLLOOCCKK is returned.  This provides similar behavior to  setting  the
              OO__NNOONNBBLLOOCCKK flag (via the ffccnnttll(2) FF__SSEETTFFLL operation), but differs in that
              MMSSGG__DDOONNTTWWAAIITT is a per-call option, whereas OO__NNOONNBBLLOOCCKK is a setting on the
              open file description (see ooppeenn(2)), which will affect all threads in the
              calling process and as well as other processes that hold file descriptors
              referring to the same open file description.

       MMSSGG__EEOORR (since Linux 2.2)
              Terminates  a  record  (when  this notion is supported, as for sockets of
              type SSOOCCKK__SSEEQQPPAACCKKEETT).

       MMSSGG__MMOORREE (since Linux 2.4.4)
              The caller has more data to send.  This flag is used with TCP sockets  to
              obtain  the  same effect as the TTCCPP__CCOORRKK socket option (see ttccpp(7)), with
              the difference that this flag can be set on a per-call basis.

              Since Linux 2.6, this flag is also supported for UDP sockets, and informs
              the  kernel  to  package all of the data sent in calls with this flag set
              into a single datagram which is transmitted only when a call is performed
              that  does  not  specify this flag.  (See also the UUDDPP__CCOORRKK socket option
              described in uuddpp(7).)

       MMSSGG__NNOOSSIIGGNNAALL (since Linux 2.2)
              Don't generate a SSIIGGPPIIPPEE signal if the peer on a  stream-oriented  socket
              has closed the connection.  The EEPPIIPPEE error is still returned.  This pro‐
              vides similar behavior to using  ssiiggaaccttiioonn(2)  to  ignore  SSIIGGPPIIPPEE,  but,
              whereas  MMSSGG__NNOOSSIIGGNNAALL  is  a  per-call  feature,  ignoring SSIIGGPPIIPPEE sets a
              process attribute that affects all threads in the process.

       MMSSGG__OOOOBB
              Sends _o_u_t_-_o_f_-_b_a_n_d data on sockets that support this notion (e.g., of type
              SSOOCCKK__SSTTRREEAAMM); the underlying protocol must also support _o_u_t_-_o_f_-_b_a_n_d data.

   sseennddmmssgg(())
       The definition of the _m_s_g_h_d_r structure employed by sseennddmmssgg() is as follows:

           struct msghdr {
               void         *msg_name;       /* Optional address */
               socklen_t     msg_namelen;    /* Size of address */
               struct iovec *msg_iov;        /* Scatter/gather array */
               size_t        msg_iovlen;     /* # elements in msg_iov */
               void         *msg_control;    /* Ancillary data, see below */
               size_t        msg_controllen; /* Ancillary data buffer len */
               int           msg_flags;      /* Flags (unused) */
           };

       The  _m_s_g___n_a_m_e  field  is used on an unconnected socket to specify the target ad‐
       dress for a datagram.  It  points  to  a  buffer  containing  the  address;  the
       _m_s_g___n_a_m_e_l_e_n  field  should  be  set to the size of the address.  For a connected
       socket, these fields should be specified as NULL and 0, respectively.

       The _m_s_g___i_o_v and _m_s_g___i_o_v_l_e_n  fields  specify  scatter-gather  locations,  as  for
       wwrriitteevv(2).

       You  may  send  control  information  (ancillary data) using the _m_s_g___c_o_n_t_r_o_l and
       _m_s_g___c_o_n_t_r_o_l_l_e_n members.  The  maximum  control  buffer  length  the  kernel  can
       process is limited per socket by the value in _/_p_r_o_c_/_s_y_s_/_n_e_t_/_c_o_r_e_/_o_p_t_m_e_m___m_a_x; see
       ssoocckkeett(7).  For further information on the use  of  ancillary  data  in  various
       socket domains, see uunniixx(7) and iipp(7).

       The _m_s_g___f_l_a_g_s field is ignored.

RREETTUURRNN VVAALLUUEE
       On  success,  these  calls return the number of bytes sent.  On error, -1 is re‐
       turned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       These are some standard errors generated by the socket layer.  Additional errors
       may  be  generated  and returned from the underlying protocol modules; see their
       respective manual pages.

       EEAACCCCEESS (For UNIX domain sockets, which are identified by pathname) Write permis‐
              sion  is  denied  on the destination socket file, or search permission is
              denied for one of the directories the  path  prefix.   (See  ppaatthh__rreessoolluu‐‐
              ttiioonn(7).)

              (For  UDP sockets) An attempt was made to send to a network/broadcast ad‐
              dress as though it was a unicast address.

       EEAAGGAAIINN or EEWWOOUULLDDBBLLOOCCKK
              The socket is marked nonblocking and the requested operation would block.
              POSIX.1-2001  allows  either error to be returned for this case, and does
              not require these constants to have the same value, so a portable  appli‐
              cation should check for both possibilities.

       EEAAGGAAIINN (Internet  domain  datagram sockets) The socket referred to by _s_o_c_k_f_d had
              not previously been bound to an address and, upon attempting to  bind  it
              to  an  ephemeral  port,  it  was determined that all port numbers in the
              ephemeral port range  are  currently  in  use.   See  the  discussion  of
              _/_p_r_o_c_/_s_y_s_/_n_e_t_/_i_p_v_4_/_i_p___l_o_c_a_l___p_o_r_t___r_a_n_g_e in iipp(7).

       EEAALLRREEAADDYY
              Another Fast Open is in progress.

       EEBBAADDFF  _s_o_c_k_f_d is not a valid open file descriptor.

       EECCOONNNNRREESSEETT
              Connection reset by peer.

       EEDDEESSTTAADDDDRRRREEQQ
              The socket is not connection-mode, and no peer address is set.

       EEFFAAUULLTT An invalid user space address was specified for an argument.

       EEIINNTTRR  A signal occurred before any data was transmitted; see ssiiggnnaall(7).

       EEIINNVVAALL Invalid argument passed.

       EEIISSCCOONNNN
              The  connection-mode  socket  was  connected  already but a recipient was
              specified.  (Now either this error is returned, or the recipient specifi‐
              cation is ignored.)

       EEMMSSGGSSIIZZEE
              The socket type requires that message be sent atomically, and the size of
              the message to be sent made this impossible.

       EENNOOBBUUFFSS
              The output queue for a network interface was full.  This generally  indi‐
              cates  that the interface has stopped sending, but may be caused by tran‐
              sient congestion.  (Normally, this does not occur in Linux.  Packets  are
              just silently dropped when a device queue overflows.)

       EENNOOMMEEMM No memory available.

       EENNOOTTCCOONNNN
              The socket is not connected, and no target has been given.

       EENNOOTTSSOOCCKK
              The file descriptor _s_o_c_k_f_d does not refer to a socket.

       EEOOPPNNOOTTSSUUPPPP
              Some bit in the _f_l_a_g_s argument is inappropriate for the socket type.

       EEPPIIPPEE  The  local  end  has  been shut down on a connection oriented socket.  In
              this case, the process will also receive a SSIIGGPPIIPPEE unless MMSSGG__NNOOSSIIGGNNAALL is
              set.

CCOONNFFOORRMMIINNGG TTOO
       4.4BSD, SVr4, POSIX.1-2001.  These interfaces first appeared in 4.2BSD.

       POSIX.1-2001  describes only the MMSSGG__OOOOBB and MMSSGG__EEOORR flags.  POSIX.1-2008 adds a
       specification of MMSSGG__NNOOSSIIGGNNAALL.  The MMSSGG__CCOONNFFIIRRMM flag is a Linux extension.

NNOOTTEESS
       According to POSIX.1-2001, the _m_s_g___c_o_n_t_r_o_l_l_e_n  field  of  the  _m_s_g_h_d_r  structure
       should  be  typed as _s_o_c_k_l_e_n___t, and the _m_s_g___i_o_v_l_e_n field should be typed as _i_n_t,
       but glibc currently types both as _s_i_z_e___t.

       See sseennddmmmmssgg(2) for information about a Linux-specific system call that  can  be
       used to transmit multiple datagrams in a single call.

BBUUGGSS
       Linux may return EEPPIIPPEE instead of EENNOOTTCCOONNNN.

EEXXAAMMPPLLEESS
       An example of the use of sseennddttoo() is shown in ggeettaaddddrriinnffoo(3).

SSEEEE AALLSSOO
       ffccnnttll(2),  ggeettssoocckkoopptt(2),  rreeccvv(2),  sseelleecctt(2),  sseennddffiillee(2), sseennddmmmmssgg(2), sshhuutt‐‐
       ddoowwnn(2),  ssoocckkeett(2),  wwrriittee(2),  ccmmssgg(3),  iipp(7),  iippvv66(7),  ssoocckkeett(7),  ttccpp(7),
       uuddpp(7), uunniixx(7)

CCOOLLOOPPHHOONN
       This page is part of release 5.10 of the Linux _m_a_n_-_p_a_g_e_s project.  A description
       of the project, information about reporting bugs, and the latest version of this
       page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                  2020-11-01                               SEND(2)
