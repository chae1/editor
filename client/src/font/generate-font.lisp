(defvar zpb-path #p"/home/chaewon/Downloads/bin/zpb-ttf-1.0.6/")
(unless (member zpb-path asdf:*central-registry* :test #'equal)
  (push zpb-path asdf:*central-registry*))
(asdf:load-system "zpb-ttf")

(ql:quickload :cl-ppcre)

(defpackage my-font
  (:use :common-lisp :my-utils :defobj :zpb-ttf))

(in-package :my-font)

(defvar *char->name* (make-hash-table :test #'equal))

(defun add-small-chars (list)
  (mapcar #'(lambda (c) (setf (gethash c *char->name*) (concatenate 'string "small_" (coerce `(,c) 'string)))) list))

(defun add-big-chars (list)
  (mapcar #'(lambda (c) (setf (gethash c *char->name*) (concatenate 'string "big_" (coerce `(,c) 'string)))) list))

(defun init-map-char->name ()
  (add-small-chars '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z))
  (add-big-chars '(#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
  (setf (gethash #\` *char->name*) "backquote")
  (setf (gethash #\~ *char->name*) "tilde")
  (setf (gethash #\! *char->name*) "exclamation_mark")
  (setf (gethash #\@ *char->name*) "ampersat")
  (setf (gethash #\# *char->name*) "sharp")
  (setf (gethash #\$ *char->name*) "dollar")
  (setf (gethash #\% *char->name*) "percent")
  (setf (gethash #\^ *char->name*) "caret")
  (setf (gethash #\& *char->name*) "ampersand")
  (setf (gethash #\* *char->name*) "asterisk")
  (setf (gethash #\( *char->name*) "open_parenthesis")
  (setf (gethash #\) *char->name*) "close_parenthesis")
  (setf (gethash #\- *char->name*) "hyphen")
  (setf (gethash #\_ *char->name*) "underscore")
  (setf (gethash #\+ *char->name*) "plus")
  (setf (gethash #\= *char->name*) "equal")
  (setf (gethash #\{ *char->name*) "open_brace")
  (setf (gethash #\} *char->name*) "close_brace")
  (setf (gethash #\[ *char->name*) "open_bracket")
  (setf (gethash #\] *char->name*) "close_bracket")
  (setf (gethash #\| *char->name*) "pipe")
  (setf (gethash #\\ *char->name*) "backslash")
  (setf (gethash #\; *char->name*) "semicolon")
  (setf (gethash #\: *char->name*) "colon")
  (setf (gethash #\' *char->name*) "single_quote")
  (setf (gethash #\" *char->name*) "quote")
  (setf (gethash #\, *char->name*) "comma")
  (setf (gethash #\. *char->name*) "period")
  (setf (gethash #\< *char->name*) "less_than")
  (setf (gethash #\> *char->name*) "greater_than")
  (setf (gethash #\? *char->name*) "question_mark")
  (setf (gethash #\/ *char->name*) "slash")
  nil)

(init-map-char->name)

(defun print-hash-entry (key value)
    (format t "~S -> ~S~%" key value))

(defun print-char->name ()
  (maphash #'print-hash-entry *char->name*))

(defobj font-info!
  (font-loader nil)
  (font-path nil)
  (font-name nil)
  (add-x 0)
  (add-y 0)
  (mono-render-box #(0 0 0 0))
  (line-height))

(defun create-font-info! (ttf-path)
  (objlet* ((font-info! (make-font-info!)))
    (setf font-loader (open-font-loader ttf-path))
    (setf font-path ttf-path)
    (setf font-name (car (cl-ppcre:split "\\." (car (last (cl-ppcre:split "/" ttf-path))))))
    (let* ((b (bounding-box (find-glyph #\a font-loader)))
	   (x-min (aref b 0))
	   (y-min (aref b 1))
	   (x-max (aref b 2))
	   (y-max (aref b 3)))
      (loop for c in '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z #\` #\~ #\! #\@ #\# #\$ #\% #\^ #\& #\* #\( #\) #\- #\_ #\+ #\= #\{ #\} #\[ #\] #\| #\\ #\; #\: #\' #\" #\, #\. #\< #\> #\? #\/) do
	(setf b (bounding-box (find-glyph c font-loader)))
	(if (> x-min (aref b 0)) (setf x-min (aref b 0)))
	(if (> y-min (aref b 1)) (setf y-min (aref b 1)))
	(if (< x-max (aref b 2)) (setf x-max (aref b 2)))
	(if (< y-max (aref b 3)) (setf y-max (aref b 3))))
      ;; (format t "~a ~a ~a ~a~%" x-min y-min x-max y-max) 
      (setf add-x (- 8 x-min))
      (setf add-y (- 10 y-min))
      ;; (format t "~a ~a~%" add-x add-y)
      (setf (aref mono-render-box 0) (- (+ x-min add-x) 8))
      (setf (aref mono-render-box 1) (- (+ y-min add-y) 10))
      (setf (aref mono-render-box 2) (+ (+ x-max add-x) 8))
      (setf (aref mono-render-box 3) (+ (+ y-max add-y) 9))
      ;; (format t "~a~%" mono-render-box)
      (setf line-height (aref mono-render-box 3))
      ;; (format t "~a~%" line-height)
      font-info!)))

(defparameter *ubuntumono-r* (create-font-info! "/home/chaewon/Desktop/chae1/editor/client/src/font/ttf/UbuntuMono-R.ttf"))

(defobjfun generate-font-info (font-info!)
  (flet ((generate-char-info (c file)
           (let* ((glyph (find-glyph c font-loader))
		  (total-curve-num (length (contours glyph))))
	     (format file "glyph~%~a~%" c)
             (format file "~%curves p1x p1y p2x p2y p3x p3y~%")
             (dotimes (curve-num total-curve-num)
	       (let ((points (explicit-contour-points (contour glyph curve-num))))
		 (let ((point-state 0))
		   (do ((i 0 (1+ i)))
		       ((eq i (length points)))
		     (let* ((point (aref points i))
			    (curr-x (+ (x point) add-x))
			    (curr-y (+ (y point) add-y)))
		       (if (on-curve-p point)
			   (ccase point-state
			     (0 (progn
				  (format file "~,2f ~,2f " curr-x curr-y)
				  (setf point-state 1)))
			     (1 (let* ((prev-point (aref points (1- i)))
				       (prev-x (+ (x prev-point) add-x))
				       (prev-y (+ (y prev-point) add-y)))
				  (format file "~,2f ~,2f " (/ (+ curr-x prev-x) 2) (/ (+ curr-y prev-y) 2))
				  (format file "~,2f ~,2f~%" curr-x curr-y)
				  (format file "~,2f ~,2f " curr-x curr-y)
				  (setf point-state 1)))
			     (2 (progn
				  (format file "~,2f ~,2f~%" curr-x curr-y)
				  (format file "~,2f ~,2f " curr-x curr-y)
				  (setf point-state 1))))
			   (ccase point-state
			     (1 (progn
				  (format file "~,2f ~,2f " curr-x curr-y)
				  (setf point-state 2)))))))

		   (let* ((point (aref points 0))
			  (curr-x (+ (x point) add-x))
			  (curr-y (+ (y point) add-y)))
		     (if (on-curve-p point)
			 (ccase point-state
			   (1 (let* ((prev-point (aref points (1- (length points))))
				     (prev-x (+ (x prev-point) add-x))
				     (prev-y (+ (y prev-point) add-y)))
				(format file "~,2f ~,2f " (/ (+ curr-x prev-x) 2) (/ (+ curr-y prev-y) 2))
				(format file "~,2f ~,2f~%" curr-x curr-y)
				(setf point-state 3)))
			   (2 (progn
				(format file "~,2f ~,2f~%" curr-x curr-y)
				(setf point-state 3))))
			 (cerror "first point is off curve" ""))))))
	     
             (format file "~%advance-width~%~,2f~%" (advance-width glyph))
	     (format file "~%render-box x-min y-min x-max y-max~%~,2f ~,2f ~,2f ~,2f~%" (aref mono-render-box 0) (aref mono-render-box 1) (aref mono-render-box 2) (aref mono-render-box 3))
	     (format file "~%glyph-info-end~%"))))

    (let ((dir-path (concatenate 'string "/home/chaewon/Desktop/chae1/editor/client/src/font/" font-name "/")))
      (ensure-directories-exist dir-path)
      (loop for c in '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z #\` #\~ #\! #\@ #\# #\$ #\% #\^ #\& #\* #\( #\) #\- #\_ #\+ #\= #\{ #\} #\[ #\] #\| #\\ #\; #\: #\' #\" #\, #\. #\< #\> #\? #\/) do
        (let ((path (concatenate 'string (concatenate 'string dir-path (gethash c *char->name*)) ".txt")))
          (with-open-file (file path :direction :output :if-exists :supersede :if-does-not-exist :create)
            (generate-char-info c file))))
      (let ((path (concatenate 'string (concatenate 'string dir-path "font-info.txt"))))
	(with-open-file (file path :direction :output :if-exists :supersede :if-does-not-exist :create)
	  (format file "font~%~a~%" font-name)
	  (format file "~%ttf-path~%~,2f~%" font-path)
          (format file "~%line-height~%~,2f~%" line-height)
	  (format file "~%font-info-end~%"))))))

(generate-font-info *ubuntumono-r*)
